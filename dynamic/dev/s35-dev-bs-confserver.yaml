AWSTemplateFormatVersion: '2010-09-09'
Description: Create a beanstalk server for the API Server. Pick a key to be used with ec2 hosts.
Parameters:
    KeyName:
      Type: AWS::EC2::KeyPair::KeyName
      Description: "Name of an existing SSH Keypair to access the instance"

Resources:
  ConfServerApplication:
    Type: AWS::ElasticBeanstalk::Application
    Properties:
      Description: AWS Elastic Beanstalk ConfServer Application
  ConfServerApplicationVersion:
    Type: AWS::ElasticBeanstalk::ApplicationVersion
    Properties:
      ApplicationName:
        Ref: ConfServerApplication
      Description: AWS ElasticBeanstalk ConfServer Application Version
      SourceBundle:
        S3Bucket: !Sub "jy-cf-setup-base-code-${AWS::Region}"
        S3Key: config.zip
  ConfServerConfigurationTemplate:
    Type: AWS::ElasticBeanstalk::ConfigurationTemplate
    Properties:
      ApplicationName:
        Ref: ConfServerApplication
      Description: AWS ElasticBeanstalk ConfServer Configuration Template
      OptionSettings:
      - Namespace: aws:autoscaling:asg
        OptionName: MinSize
        Value: '1'
      - Namespace: aws:autoscaling:asg
        OptionName: MaxSize
        Value: '4'
      - Namespace: aws:elasticbeanstalk:environment
        OptionName: EnvironmentType
        Value: LoadBalanced

      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: IamInstanceProfile
        Value: !Ref MyInstanceProfile
      - Namespace: aws:autoscaling:launchconfiguration
        OptionName: EC2KeyName
        Value: !Ref KeyName

      - Namespace: aws:elasticbeanstalk:environment
        OptionName: LoadBalancerType
        # there is no need to have NLB on config server.
        # ALB will work just fine..
        Value: 'network'
        # Value: 'application'

      - Namespace: aws:ec2:vpc
        OptionName: VPCId
        Value: !ImportValue jy-vpc-dev

      - Namespace: aws:ec2:vpc
        OptionName: Subnets
        Value: !Sub 
          - "${suba}, ${subb}, ${subc}"
          - { suba: !ImportValue jy-vpc-dev-subnet-configa, subb: !ImportValue jy-vpc-dev-subnet-configb, subc: !ImportValue jy-vpc-dev-subnet-configc }
      - Namespace: aws:ec2:instances
        OptionName: InstanceTypes
        Value: 't2.medium'

      # don't want this to be visible publically. should resolve to internal ip.
      - Namespace: aws:ec2:vpc
        OptionName: ELBScheme
        Value: 'internal'

      # how changes will be rolled out to intances
      - Namespace: aws:elasticbeanstalk:command
        OptionName: DeploymentPolicy
        Value: 'Rolling'

      # ASG settings
      # scale based on CPU utilization
      - Namespace: aws:autoscaling:trigger
        OptionName: MeasureName
        Value: 'CPUUtilization'
      # lower threshold is 20% CPU
      - Namespace: aws:autoscaling:trigger
        OptionName: LowerThreshold
        Value: '20'
      # polling period is every 3 mins  
      - Namespace: aws:autoscaling:trigger
        OptionName: Period
        Value: '3'
      # two such a period should pass for trigger to happen
      - Namespace: aws:autoscaling:trigger
        OptionName: EvaluationPeriods
        Value: '2'
      # unit of operation is Percetage of CPU util.
      - Namespace: aws:autoscaling:trigger
        OptionName: Unit
      # uppper limit when ASG will add the instance
        Value: 'Percent'
      - Namespace: aws:autoscaling:trigger
        OptionName: UpperThreshold
        Value: '75'
      # Log needs to be stramed into cloud watch
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: StreamLogs
        Value: 'True'
      # retain the logs for 7 days
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs
        OptionName: RetentionInDays
        Value: '7'

      # added new once - Oct 15th.. let's see how they work
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs:health
        OptionName: HealthStreamingEnabled
        Value: 'True'
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs:health
        OptionName: DeleteOnTerminate
        Value: 'False'
      - Namespace: aws:elasticbeanstalk:cloudwatch:logs:health
        OptionName: RetentionInDays
        Value: '7'

      # environment variables to pass in
      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: "PORT"
        Value: '8888'

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: "GRADLE_HOME"
        Value: '/usr/local/gradle'

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: "JAVA_HOME"
        Value: '/usr/lib/jvm/java'

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: "M2"
        Value: '/usr/local/apache-maven/bin'

      - Namespace: aws:elasticbeanstalk:application:environment
        OptionName: "M2_HOME"
        Value: '/usr/local/apache-maven'


      SolutionStackName: "64bit Amazon Linux 2 v3.2.7 running Corretto 8"
      # SolutionStackName: "64bit Amazon Linux 2 v3.3.5 running Python 3.8"

  ConfServerEnvironment:
    Type: AWS::ElasticBeanstalk::Environment
    Properties:
      # let's give it a name
      EnvironmentName: "beanstalk-configserver-dev"
      ApplicationName:
        Ref: ConfServerApplication
      Description: AWS ElasticBeanstalk ConfServer Environment
      TemplateName:
        Ref: ConfServerConfigurationTemplate
      VersionLabel:
        Ref: ConfServerApplicationVersion
  
  # instance profile that uses the role we created earlier.  
  # has standard bs related policies and access to KMS/S3 buckets
  MyInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !ImportValue jy-ec2genericrolename-dev

Outputs:
  somevariable:
    Description: Some description
    Value: 
      Ref: "ConfServerConfigurationTemplate"
  endpointurl:
    Description: the beanstalk endpoint url
    Value:   !GetAtt ConfServerEnvironment.EndpointURL
    Export:
      Name: jy-branstalkconfigseverurl-dev

